{"version":3,"file":"udixio-theme.cjs.production.min.js","sources":["../src/material-color-utilities/contrastCurve.ts","../src/material-color-utilities/toneDeltaPair.ts","../src/material-color-utilities/dynamic_color.ts","../src/color/entities/color.entity.ts","../src/color/dynamic-color.service.ts","../src/color/models/default-color.model.ts","../src/theme/scheme-service.ts","../src/color/color.service.ts","../src/theme/theme.service.ts","../src/app.service.ts","../src/theme/theme.module.ts","../src/color/color.module.ts","../src/app.module.ts","../src/main.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { lerp } from '@material/material-color-utilities';\n\n/**\n * A class containing the contrast curve for a dynamic color on its background.\n *\n * The four values correspond to contrast requirements for contrast levels\n * -1.0, 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n  /**\n   * Creates a `ContrastCurve` object.\n   *\n   * @param low Contrast requirement for contrast level -1.0\n   * @param normal Contrast requirement for contrast level 0.0\n   * @param medium Contrast requirement for contrast level 0.5\n   * @param high Contrast requirement for contrast level 1.0\n   */\n  constructor(\n    readonly low: number,\n    readonly normal: number,\n    readonly medium: number,\n    readonly high: number\n  ) {}\n\n  /**\n   * Returns the contrast ratio at a given contrast level.\n   *\n   * @param contrastLevel The contrast level. 0.0 is the default (normal);\n   * -1.0 is the lowest; 1.0 is the highest.\n   * @return The contrast ratio, a number between 1.0 and 21.0.\n   */\n  getContrast(contrastLevel: number): number {\n    if (contrastLevel <= -1.0) {\n      return this.low;\n    } else if (contrastLevel < 0.0) {\n      return lerp(this.low, this.normal, (contrastLevel - -1) / 1);\n    } else if (contrastLevel < 0.5) {\n      return lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n    } else if (contrastLevel < 1.0) {\n      return lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.high;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicColor } from './dynamic_color';\n\n/**\n * Describes the different in tone between colors.\n */\nexport type TonePolarity = 'darker' | 'lighter' | 'nearer' | 'farther';\n\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n  /**\n   * Documents a constraint in tone distance between two DynamicColors.\n   *\n   * The polarity is an adjective that describes \"A\", compared to \"B\".\n   *\n   * For instance, ToneDeltaPair(A, B, 15, 'darker', stayTogether) states that\n   * A's tone should be at least 15 darker than B's.\n   *\n   * 'nearer' and 'farther' describes closeness to the surface roles. For\n   * instance, ToneDeltaPair(A, B, 10, 'nearer', stayTogether) states that A\n   * should be 10 lighter than B in light mode, and 10 darker than B in dark\n   * mode.\n   *\n   * @param roleA The first role in a pair.\n   * @param roleB The second role in a pair.\n   * @param delta Required difference between tones. Absolute value, negative\n   * values have undefined behavior.\n   * @param polarity The relative relation between tones of roleA and roleB,\n   * as described above.\n   * @param stayTogether Whether these two roles should stay on the same side of\n   * the \"awkward zone\" (T50-59). This is necessary for certain cases where\n   * one role has two backgrounds.\n   */\n  constructor(\n    readonly roleA: DynamicColor,\n    readonly roleB: DynamicColor,\n    readonly delta: number,\n    readonly polarity: TonePolarity,\n    readonly stayTogether: boolean\n  ) {}\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { clampDouble, Contrast, Hct, TonalPalette } from '@material/material-color-utilities';\nimport { SchemeService } from '../theme/scheme-service';\nimport { ContrastCurve } from './contrastCurve';\nimport { ToneDeltaPair } from './toneDeltaPair';\n\n/**\n * @param name The name of the dynamic color. Defaults to empty.\n * @param palette Function that provides a TonalPalette given\n * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n * replaces the need to specify hue/chroma. By providing a tonal palette, when\n * contrast adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme.\n * @param isBackground Whether this dynamic color is a background, with\n * some other color as the foreground. Defaults to false.\n * @param background The background of the dynamic color (as a function of a\n *     `DynamicScheme`), if it exists.\n * @param secondBackground A second background of the dynamic color (as a\n *     function of a `DynamicScheme`), if it\n * exists.\n * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n * against its background should behave in various contrast levels options.\n * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n * constraint between two colors. One of them must be the color being\n * constructed.\n */\ninterface FromPaletteOptions {\n  name?: string;\n  palette: (scheme: SchemeService) => TonalPalette;\n  tone: (scheme: SchemeService) => number;\n  isBackground?: boolean;\n  background?: (scheme: SchemeService) => DynamicColor;\n  secondBackground?: (scheme: SchemeService) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: SchemeService) => ToneDeltaPair;\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<SchemeService, Hct>();\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param name The name of the dynamic color. Defaults to empty.\n   * @param palette Function that provides a TonalPalette given\n   * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n   * replaces the need to specify hue/chroma. By providing a tonal palette, when\n   * contrast adjustments are made, intended chroma can be preserved.\n   * @param tone Function that provides a tone, given a DynamicScheme.\n   * @param isBackground Whether this dynamic color is a background, with\n   * some other color as the foreground. Defaults to false.\n   * @param background The background of the dynamic color (as a function of a\n   *     `DynamicScheme`), if it exists.\n   * @param secondBackground A second background of the dynamic color (as a\n   *     function of a `DynamicScheme`), if it\n   * exists.\n   * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n   * against its background should behave in various contrast levels options.\n   * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n   * constraint between two colors. One of them must be the color being\n   * constructed.\n   */\n  constructor(\n    readonly name: string,\n    readonly palette: (scheme: SchemeService) => TonalPalette,\n    readonly tone: (scheme: SchemeService) => number,\n    readonly isBackground: boolean,\n    readonly background?: (scheme: SchemeService) => DynamicColor,\n    readonly secondBackground?: (scheme: SchemeService) => DynamicColor,\n    readonly contrastCurve?: ContrastCurve,\n    readonly toneDeltaPair?: (scheme: SchemeService) => ToneDeltaPair\n  ) {\n    if (!background && secondBackground) {\n      throw new Error(\n        `Color ${name} has secondBackground` +\n          `defined, but background is not defined.`\n      );\n    }\n    if (!background && contrastCurve) {\n      throw new Error(\n        `Color ${name} has contrastCurve` +\n          `defined, but background is not defined.`\n      );\n    }\n    if (background && !contrastCurve) {\n      throw new Error(\n        `Color ${name} has background` +\n          `defined, but contrastCurve is not defined.`\n      );\n    }\n  }\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n      args.name ?? '',\n      args.palette,\n      args.tone,\n      args.isBackground ?? false,\n      args.background,\n      args.secondBackground,\n      args.contrastCurve,\n      args.toneDeltaPair\n    );\n  }\n\n  /**\n   * Given a background tone, find a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference =\n        Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n        lighterRatio < ratio &&\n        darkerRatio < ratio;\n      return lighterRatio >= ratio ||\n        lighterRatio >= darkerRatio ||\n        negligibleDifference\n        ? lighterTone\n        : darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio\n        ? darkerTone\n        : lighterTone;\n    }\n  }\n\n  /**\n   * Returns whether [tone] prefers a light foreground.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n   * 60, it should not be adjusted. Therefore, 60 is excluded here.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) < 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjust a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (\n      DynamicColor.tonePrefersLightForeground(tone) &&\n      !DynamicColor.toneAllowsLightForeground(tone)\n    ) {\n      return 49.0;\n    }\n    return tone;\n  }\n\n  /**\n   * Return a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getArgb(scheme: SchemeService): number {\n    return this.getHct(scheme).toInt();\n  }\n\n  /**\n   * Return a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getHct(scheme: SchemeService): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const tone = this.getTone(scheme);\n    const answer = this.palette(scheme).getHct(tone);\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Return a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getTone(scheme: SchemeService): number {\n    const decreasingContrast = scheme.contrastLevel < 0;\n\n    // Case 1: dual foreground, pair of colors with delta constraint.\n    if (this.toneDeltaPair) {\n      const toneDeltaPair = this.toneDeltaPair(scheme);\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const delta = toneDeltaPair.delta;\n      const polarity = toneDeltaPair.polarity;\n      const stayTogether = toneDeltaPair.stayTogether;\n\n      const bg = this.background!(scheme);\n      const bgTone = bg.getTone(scheme);\n\n      const aIsNearer =\n        polarity === 'nearer' ||\n        (polarity === 'lighter' && !scheme.isDark) ||\n        (polarity === 'darker' && scheme.isDark);\n      const nearer = aIsNearer ? roleA : roleB;\n      const farther = aIsNearer ? roleB : roleA;\n      const amNearer = this.name === nearer.name;\n      const expansionDir = scheme.isDark ? 1 : -1;\n\n      // 1st round: solve to min, each\n      const nContrast = nearer.contrastCurve!.getContrast(scheme.contrastLevel);\n      const fContrast = farther.contrastCurve!.getContrast(\n        scheme.contrastLevel\n      );\n\n      // If a color is good enough, it is not adjusted.\n      // Initial and adjusted tones for `nearer`\n      const nInitialTone = nearer.tone(scheme);\n      let nTone =\n        Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n          ? nInitialTone\n          : DynamicColor.foregroundTone(bgTone, nContrast);\n      // Initial and adjusted tones for `farther`\n      const fInitialTone = farther.tone(scheme);\n      let fTone =\n        Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n          ? fInitialTone\n          : DynamicColor.foregroundTone(bgTone, fContrast);\n\n      if (decreasingContrast) {\n        // If decreasing contrast, adjust color to the \"bare minimum\"\n        // that satisfies contrast.\n        nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n        fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n      }\n\n      if ((fTone - nTone) * expansionDir >= delta) {\n        // Good! Tones satisfy the constraint; no change needed.\n      } else {\n        // 2nd round: expand farther to match delta.\n        fTone = clampDouble(0, 100, nTone + delta * expansionDir);\n        if ((fTone - nTone) * expansionDir >= delta) {\n          // Good! Tones now satisfy the constraint; no change needed.\n        } else {\n          // 3rd round: contract nearer to match delta.\n          nTone = clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // Avoids the 50-59 awkward zone.\n      if (50 <= nTone && nTone < 60) {\n        // If `nearer` is in the awkward zone, move it away, together with\n        // `farther`.\n        if (expansionDir > 0) {\n          nTone = 60;\n          fTone = Math.max(fTone, nTone + delta * expansionDir);\n        } else {\n          nTone = 49;\n          fTone = Math.min(fTone, nTone + delta * expansionDir);\n        }\n      } else if (50 <= fTone && fTone < 60) {\n        if (stayTogether) {\n          // Fixes both, to avoid two colors on opposite sides of the \"awkward\n          // zone\".\n          if (expansionDir > 0) {\n            nTone = 60;\n            fTone = Math.max(fTone, nTone + delta * expansionDir);\n          } else {\n            nTone = 49;\n            fTone = Math.min(fTone, nTone + delta * expansionDir);\n          }\n        } else {\n          // Not required to stay together; fixes just one.\n          if (expansionDir > 0) {\n            fTone = 60;\n          } else {\n            fTone = 49;\n          }\n        }\n      }\n\n      // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n      return amNearer ? nTone : fTone;\n    } else {\n      // Case 2: No contrast pair; just solve for itself.\n      let answer = this.tone(scheme);\n\n      if (this.background == null) {\n        return answer; // No adjustment for colors with no background.\n      }\n\n      const bgTone = this.background(scheme).getTone(scheme);\n\n      const desiredRatio = this.contrastCurve!.getContrast(\n        scheme.contrastLevel\n      );\n\n      if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n        // Don't \"improve\" what's good enough.\n      } else {\n        // Rough improvement.\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (this.isBackground && 50 <= answer && answer < 60) {\n        // Must adjust\n        if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n          answer = 49;\n        } else {\n          answer = 60;\n        }\n      }\n\n      if (this.secondBackground) {\n        // Case 3: Adjust for dual backgrounds.\n\n        const [bg1, bg2] = [this.background, this.secondBackground];\n        const [bgTone1, bgTone2] = [\n          bg1(scheme).getTone(scheme),\n          bg2(scheme).getTone(scheme),\n        ];\n        const [upper, lower] = [\n          Math.max(bgTone1, bgTone2),\n          Math.min(bgTone1, bgTone2),\n        ];\n\n        if (\n          Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n          Contrast.ratioOfTones(lower, answer) >= desiredRatio\n        ) {\n          return answer;\n        }\n\n        // The darkest light tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const lightOption = Contrast.lighter(upper, desiredRatio);\n\n        // The lightest dark tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const darkOption = Contrast.darker(lower, desiredRatio);\n\n        // Tones suitable for the foreground.\n        const availables = [];\n        if (lightOption !== -1) availables.push(lightOption);\n        if (darkOption !== -1) availables.push(darkOption);\n\n        const prefersLight =\n          DynamicColor.tonePrefersLightForeground(bgTone1) ||\n          DynamicColor.tonePrefersLightForeground(bgTone2);\n        if (prefersLight) {\n          return lightOption < 0 ? 100 : lightOption;\n        }\n        if (availables.length === 1) {\n          return availables[0];\n        }\n        return darkOption < 0 ? 0 : darkOption;\n      }\n\n      return answer;\n    }\n  }\n}\n","import { hexFromArgb, TonalPalette } from '@material/material-color-utilities';\nimport { SchemeService } from '../../theme/scheme-service';\nimport { DynamicColor } from '../../material-color-utilities/dynamic_color';\nimport { ContrastCurve } from '../../material-color-utilities';\n\n\nexport interface ColorOptions {\n  name: string;\n  palette: (scheme: SchemeService) => TonalPalette;\n  tone: (scheme: SchemeService) => number;\n  isBackground?: boolean;\n  background?: (scheme: SchemeService) => DynamicColor;\n  secondBackground?: (scheme: SchemeService) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: SchemeService) => {\n    roleA: DynamicColor;\n    readonly roleB: DynamicColor;\n    readonly delta: number;\n    readonly polarity: 'darker' | 'lighter' | 'nearer' | 'farther';\n    readonly stayTogether: boolean;\n  };\n}\n\nexport class ColorEntity {\n  constructor(private option: ColorOptions) {}\n\n  update(args: Partial<ColorOptions>) {\n    this.option = {\n      ...this.option,\n      ...args,\n    };\n  }\n\n  getHex(scheme: SchemeService): string {\n    return hexFromArgb(this.getArgb(scheme));\n  }\n\n  getArgb(scheme: SchemeService) {\n    return this.getDynamicColor().getArgb(scheme);\n  }\n\n  getName(): string {\n    return this.option.name.replace(/([A-Z])/g, '_$1').toLowerCase();\n  }\n\n  getDynamicColor(): DynamicColor {\n    return DynamicColor.fromPalette({ ...this.option, name: this.getName() });\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { ContrastCurve, ToneDeltaPair } from '../material-color-utilities';\nimport { DynamicColor } from '../material-color-utilities/dynamic_color';\nimport { SchemeService } from '../theme/scheme-service';\n\nimport { ColorEntity, ColorOptions } from './entities/color.entity';\n\n\nexport type DynamicColorKey =\n  | 'background'\n  | 'onBackground'\n  | 'surface'\n  | 'surfaceDim'\n  | 'surfaceBright'\n  | 'surfaceContainerLowest'\n  | 'surfaceContainerLow'\n  | 'surfaceContainer'\n  | 'surfaceContainerHigh'\n  | 'surfaceContainerHighest'\n  | 'onSurface'\n  | 'surfaceVariant'\n  | 'onSurfaceVariant'\n  | 'inverseSurface'\n  | 'inverseOnSurface'\n  | 'outline'\n  | 'outlineVariant'\n  | 'shadow'\n  | 'scrim'\n  | 'surfaceTint'\n  | 'primary'\n  | 'onPrimary'\n  | 'primaryContainer'\n  | 'onPrimaryContainer'\n  | 'inversePrimary'\n  | 'secondary'\n  | 'onSecondary'\n  | 'secondaryContainer'\n  | 'onSecondaryContainer'\n  | 'tertiary'\n  | 'onTertiary'\n  | 'tertiaryContainer'\n  | 'onTertiaryContainer'\n  | 'error'\n  | 'onError'\n  | 'errorContainer'\n  | 'onErrorContainer'\n  | 'primaryFixed'\n  | 'primaryFixedDim'\n  | 'onPrimaryFixed'\n  | 'onPrimaryFixedVariant'\n  | 'secondaryFixed'\n  | 'secondaryFixedDim'\n  | 'onSecondaryFixed'\n  | 'onSecondaryFixedVariant'\n  | 'tertiaryFixed'\n  | 'tertiaryFixedDim'\n  | 'onTertiaryFixed'\n  | 'onTertiaryFixedVariant';\n\nfunction capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n@Injectable()\nexport class DynamicColorService {\n  private colorMap = new Map<string, ColorEntity>();\n\n  createOrUpdate(key: string, args: Omit<ColorOptions, 'name'>) {\n    if (!this.colorMap.has(key)) {\n      this.colorMap.set(key, new ColorEntity({ ...args, name: key }));\n    } else {\n      const colorEntity = this.colorMap.get(key);\n      if (!colorEntity) {\n        throw new Error('Color entity not found');\n      }\n      colorEntity.update({ ...args, name: key });\n      this.colorMap.set(key, colorEntity);\n    }\n  }\n\n  public get(key: string): DynamicColor {\n    const color = this.colorMap.get(key);\n    if (color) {\n      return color.getDynamicColor();\n    } else {\n      throw new Error(`Color ${key} does not exist`);\n    }\n  }\n\n  highestSurface(s: SchemeService): DynamicColor {\n    return s.isDark ? this.get('surfaceBright') : this.get('surfaceDim');\n  }\n\n  addFromPalette(key: string): void {\n    const colorKey = key as DynamicColorKey;\n    const ColorKey = capitalizeFirstLetter(key);\n    const onColorKey = ('on' + ColorKey) as DynamicColorKey;\n    const colorKeyContainer = (colorKey + 'Container') as DynamicColorKey;\n    const onColorKeyContainer = ('on' +\n      ColorKey +\n      'Container') as DynamicColorKey;\n    const inverseColorKey = ('inverse' + ColorKey) as DynamicColorKey;\n    const colorKeyFixed = (colorKey + 'Fixed') as DynamicColorKey;\n    const colorKeyFixedDim = (colorKey + 'FixedDim') as DynamicColorKey;\n    const onColorKeyFixed = ('on' + ColorKey + 'Fixed') as DynamicColorKey;\n    const onColorKeyFixedVariant = ('on' +\n      ColorKey +\n      'FixedVariant') as DynamicColorKey;\n\n    this.createOrUpdate(colorKey, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 80 : 40;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyContainer),\n          this.get(colorKey),\n          15,\n          'nearer',\n          false\n        ),\n    });\n    this.createOrUpdate(onColorKey, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 20 : 100;\n      },\n      background: (s) => this.get(colorKey),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    });\n    this.createOrUpdate(colorKeyContainer, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 30 : 90;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyContainer),\n          this.get(colorKey),\n          15,\n          'nearer',\n          false\n        ),\n    });\n    this.createOrUpdate(onColorKeyContainer, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 90 : 10;\n      },\n      background: (s) => this.get(colorKeyContainer),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    });\n    this.createOrUpdate(inverseColorKey, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => (s.isDark ? 40 : 80),\n      background: (s) => this.get('inverseSurface'),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    });\n    this.createOrUpdate(colorKeyFixed, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 90.0,\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyFixed),\n          this.get(colorKeyFixedDim),\n          10,\n          'lighter',\n          true\n        ),\n    });\n    this.createOrUpdate(colorKeyFixedDim, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 80.0,\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyFixed),\n          this.get(colorKeyFixedDim),\n          10,\n          'lighter',\n          true\n        ),\n    });\n    this.createOrUpdate(onColorKeyFixed, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 10.0,\n      background: (s) => this.get(colorKeyFixedDim),\n      secondBackground: (s) => this.get(colorKeyFixed),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    });\n    this.createOrUpdate(onColorKeyFixedVariant, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 30.0,\n      background: (s) => this.get(colorKeyFixedDim),\n      secondBackground: (s) => this.get(colorKeyFixed),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n}\n","import { DislikeAnalyzer, Hct } from '@material/material-color-utilities';\nimport { ContrastCurve, ToneDeltaPair } from '../../material-color-utilities';\nimport { DynamicColor } from '../../material-color-utilities/dynamic_color';\nimport { Injectable } from '@nestjs/common';\nimport { ColorOptions } from '../entities/color.entity';\nimport { DynamicColorService } from '../dynamic-color.service';\n\nexport type DynamicColorKey =\n  | 'background'\n  | 'onBackground'\n  | 'surface'\n  | 'surfaceDim'\n  | 'surfaceBright'\n  | 'surfaceContainerLowest'\n  | 'surfaceContainerLow'\n  | 'surfaceContainer'\n  | 'surfaceContainerHigh'\n  | 'surfaceContainerHighest'\n  | 'onSurface'\n  | 'surfaceVariant'\n  | 'onSurfaceVariant'\n  | 'inverseSurface'\n  | 'inverseOnSurface'\n  | 'outline'\n  | 'outlineVariant'\n  | 'shadow'\n  | 'scrim'\n  | 'surfaceTint'\n  | 'primary'\n  | 'onPrimary'\n  | 'primaryContainer'\n  | 'onPrimaryContainer'\n  | 'inversePrimary'\n  | 'secondary'\n  | 'onSecondary'\n  | 'secondaryContainer'\n  | 'onSecondaryContainer'\n  | 'tertiary'\n  | 'onTertiary'\n  | 'tertiaryContainer'\n  | 'onTertiaryContainer'\n  | 'error'\n  | 'onError'\n  | 'errorContainer'\n  | 'onErrorContainer'\n  | 'primaryFixed'\n  | 'primaryFixedDim'\n  | 'onPrimaryFixed'\n  | 'onPrimaryFixedVariant'\n  | 'secondaryFixed'\n  | 'secondaryFixedDim'\n  | 'onSecondaryFixed'\n  | 'onSecondaryFixedVariant'\n  | 'tertiaryFixed'\n  | 'tertiaryFixedDim'\n  | 'onTertiaryFixed'\n  | 'onTertiaryFixedVariant';\n\nfunction findDesiredChromaByTone(\n  hue: number,\n  chroma: number,\n  tone: number,\n  byDecreasingTone: boolean\n): number {\n  let answer = tone;\n\n  let closestToChroma = Hct.from(hue, chroma, tone);\n  if (closestToChroma.chroma < chroma) {\n    let chromaPeak = closestToChroma.chroma;\n    while (closestToChroma.chroma < chroma) {\n      answer += byDecreasingTone ? -1.0 : 1.0;\n      const potentialSolution = Hct.from(hue, chroma, answer);\n      if (chromaPeak > potentialSolution.chroma) {\n        break;\n      }\n      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n        break;\n      }\n\n      const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n      const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n      if (potentialDelta < currentDelta) {\n        closestToChroma = potentialSolution;\n      }\n      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n    }\n  }\n\n  return answer;\n}\n\n@Injectable()\nexport class DefaultColorModel {\n  colors: Partial<\n    Record<DynamicColorKey, Partial<Omit<ColorOptions, 'name'>>>\n  > = {\n    background: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 6 : 98),\n      isBackground: true,\n    },\n    onBackground: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.dynamicColorService.get('background'),\n      contrastCurve: new ContrastCurve(3, 3, 4.5, 7),\n    },\n    surface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 6 : 98),\n      isBackground: true,\n    },\n    surfaceDim: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 6 : 87),\n      isBackground: true,\n    },\n    surfaceBright: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 24 : 98),\n      isBackground: true,\n    },\n    surfaceContainerLowest: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 4 : 100),\n      isBackground: true,\n    },\n    surfaceContainerLow: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 10 : 96),\n      isBackground: true,\n    },\n    surfaceContainer: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 12 : 94),\n      isBackground: true,\n    },\n    surfaceContainerHigh: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 17 : 92),\n      isBackground: true,\n    },\n    surfaceContainerHighest: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 22 : 90),\n      isBackground: true,\n    },\n    onSurface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    surfaceVariant: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 30 : 90),\n      isBackground: true,\n    },\n    onSurfaceVariant: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 80 : 30),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    },\n    inverseSurface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 90 : 20),\n    },\n    inverseOnSurface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 20 : 95),\n      background: (s) => this.dynamicColorService.get('inverseSurface'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    outline: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 60 : 50),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(1.5, 3, 4.5, 7),\n    },\n    outlineVariant: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 30 : 80),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    },\n    shadow: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => 0,\n    },\n    scrim: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => 0,\n    },\n    surfaceTint: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n    },\n    secondaryContainer: {\n      tone: (s) => {\n        const initialTone = s.isDark ? 30 : 90;\n        return findDesiredChromaByTone(\n          s.getPalette('secondary').hue,\n          s.getPalette('secondary').chroma,\n          initialTone,\n          !s.isDark\n        );\n      },\n    },\n    onSecondaryContainer: {\n      tone: (s) => {\n        return DynamicColor.foregroundTone(\n          this.dynamicColorService.get('secondaryContainer').tone(s),\n          4.5\n        );\n      },\n    },\n    tertiaryContainer: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => {\n        const proposedHct = s\n          .getPalette('tertiaryPalette')\n          .getHct(s.sourceColorHct.tone);\n        return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n      },\n    },\n    onTertiaryContainer: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => {\n        return DynamicColor.foregroundTone(\n          this.dynamicColorService.get('tertiaryContainer').tone(s),\n          4.5\n        );\n      },\n    },\n    error: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.dynamicColorService.get('errorContainer'),\n          this.dynamicColorService.get('error'),\n          15,\n          'nearer',\n          false\n        ),\n    },\n    onError: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 20 : 100),\n      background: (s) => this.dynamicColorService.get('error'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    errorContainer: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 30 : 90),\n      isBackground: true,\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.dynamicColorService.get('errorContainer'),\n          this.dynamicColorService.get('error'),\n          15,\n          'nearer',\n          false\n        ),\n    },\n    onErrorContainer: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.dynamicColorService.get('errorContainer'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n\n    onTertiaryFixed: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => 10.0,\n      background: (s) => this.dynamicColorService.get('tertiaryFixedDim'),\n      secondBackground: (s) => this.dynamicColorService.get('tertiaryFixed'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    onTertiaryFixedVariant: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => 30.0,\n      background: (s) => this.dynamicColorService.get('tertiaryFixedDim'),\n      secondBackground: (s) => this.dynamicColorService.get('tertiaryFixed'),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    },\n  };\n\n  constructor(private dynamicColorService: DynamicColorService) {}\n}\n","import { Hct, TonalPalette } from '@material/material-color-utilities';\nimport { Injectable } from '@nestjs/common';\n\nexport interface SchemeOptions {\n  sourceColorArgb: number;\n  contrastLevel: number;\n  isDark: boolean;\n  palettes: Map<string, TonalPalette>;\n}\n\n@Injectable()\nexport class SchemeService {\n  options?: SchemeOptions;\n\n  get contrastLevel() {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n    return this.options.contrastLevel;\n  }\n\n  get isDark() {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n    return this.options.isDark;\n  }\n\n  get sourceColorHct() {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n    return Hct.fromInt(this.options.sourceColorArgb);\n  }\n\n  getPalette(key: string): TonalPalette {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n\n    const palette = this.options.palettes.get(key);\n    if (!palette) {\n      throw new Error(`Palette ${key} not found`);\n    }\n    return palette;\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { DefaultColorModel } from './models/default-color.model';\nimport { DynamicColorService } from './dynamic-color.service';\nimport { Hct, hexFromArgb } from '@material/material-color-utilities';\nimport { SchemeService } from '../theme/scheme-service';\n\n@Injectable()\nexport class ColorService {\n  constructor(\n    private defaultColorModel: DefaultColorModel,\n    private dynamicColorService: DynamicColorService,\n    private schemeService: SchemeService\n  ) {}\n\n  addBaseColors() {\n    this.dynamicColorService.addFromPalette('primary');\n    this.dynamicColorService.addFromPalette('secondary');\n    this.dynamicColorService.addFromPalette('tertiary');\n    for (const [key, value] of Object.entries(this.defaultColorModel.colors)) {\n      this.dynamicColorService.createOrUpdate(key, value as any);\n    }\n  }\n\n  getArgb(key: string): number {\n    return this.dynamicColorService.get(key).getArgb(this.schemeService);\n  }\n\n  getHex(key: string): string {\n    return hexFromArgb(this.getArgb(key));\n  }\n\n  getHct(key: string): Hct {\n    return this.dynamicColorService.get(key).getHct(this.schemeService);\n  }\n}\n","import { DynamicColor } from '@material/material-color-utilities';\nimport { Injectable } from '@nestjs/common';\nimport { SchemeOptions, SchemeService } from './scheme-service';\n\ntype ThemeOptions = SchemeOptions;\n\nconst colorPaletteKeyColor = DynamicColor.fromPalette({\n  name: 'primary_palette_key_color',\n  palette: (s) => s.primaryPalette,\n  tone: (s) => s.primaryPalette.keyColor.tone,\n});\n\n@Injectable()\nexport class ThemeService {\n  constructor(private schemeService: SchemeService) {\n    // this.addPalette({key: \"primary\", addDefaultColors: true})\n    // this.addPalette({key: \"secondary\", addDefaultColors: true})\n    // this.addPalette({key: \"tertiary\", addDefaultColors: true})\n    // this.addPalette({key: \"error\", palette: TonalPalette.fromHueAndChroma(25.0, 84.0)})\n    // this.addPalette({key: \"neutral\"})\n    // this.addPalette({key: \"neutralVariant\"})\n  }\n  // addPalette({key, palette, addDefaultColors}: {key: string; palette: TonalPalette; addDefaultColors: boolean}) {\n  //   this.themeOptions.palettes.set(key, palette);\n  //   if (addDefaultColors){\n  //     this.colorService.addPalette(key)\n  //   }\n  // }\n\n  // create(args: ThemeOptions): SchemeService {\n  //   return new SchemeService(args, this.colorService)\n  // }\n  //\n  // update(options: Partial<ThemeOptions>): SchemeService {\n  //   Object.assign(this.themeOptions, options);\n  //   return this.theme();\n  // }\n\n  create(options: ThemeOptions) {\n    this.schemeService.options = options;\n  }\n\n  update(options: ThemeOptions) {\n    this.schemeService.options = {\n      ...this.schemeService.options,\n      ...options,\n    };\n  }\n\n  // theme(): SchemeService {\n  //   return new SchemeService(this.themeOptions, this.colorService)\n  // }\n}\n","import { Injectable } from '@nestjs/common';\nimport { ColorService } from './color/color.service';\nimport { ThemeService } from './theme/theme.service';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    public colorService: ColorService,\n    public themeService: ThemeService\n  ) {}\n}\n","import { Module } from '@nestjs/common';\nimport { SchemeService } from './scheme-service';\nimport { ThemeService } from './theme.service';\n\n@Module({\n  providers: [SchemeService, ThemeService],\n  exports: [ThemeService, SchemeService],\n})\nexport class ThemeModule {}\n","import { ColorService } from './color.service';\nimport { Module } from '@nestjs/common';\nimport { DefaultColorModel } from './models/default-color.model';\nimport { DynamicColorService } from './dynamic-color.service';\nimport { ThemeModule } from '../theme/theme.module';\n\n@Module({\n  imports: [ThemeModule],\n  providers: [DefaultColorModel, ColorService, DynamicColorService],\n  exports: [ColorService],\n})\nexport class ColorModule {}\n","import { Module } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ColorModule } from './color/color.module';\nimport { ThemeModule } from './theme/theme.module';\n\n@Module({\n  imports: [ColorModule, ThemeModule],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n"],"names":["ContrastCurve","low","normal","medium","high","this","prototype","getContrast","contrastLevel","lerp","ToneDeltaPair","roleA","roleB","delta","polarity","stayTogether","DynamicColor","name","palette","tone","isBackground","background","secondBackground","contrastCurve","toneDeltaPair","hctCache","Map","Error","fromPalette","args","_args$name","_args$isBackground","foregroundTone","bgTone","ratio","lighterTone","Contrast","lighterUnsafe","darkerTone","darkerUnsafe","lighterRatio","ratioOfTones","darkerRatio","tonePrefersLightForeground","negligibleDifference","Math","abs","round","toneAllowsLightForeground","enableLightForeground","_proto","getArgb","scheme","getHct","toInt","cachedAnswer","get","getTone","answer","size","clear","set","decreasingContrast","aIsNearer","isDark","nearer","farther","amNearer","expansionDir","nContrast","fContrast","nInitialTone","nTone","fInitialTone","fTone","clampDouble","max","min","desiredRatio","_ref","bg2","_ref2","bg1","bgTone1","bgTone2","_ref3","upper","lower","lightOption","lighter","darkOption","darker","availables","push","length","ColorEntity","option","update","_extends","getHex","hexFromArgb","getDynamicColor","getName","replace","toLowerCase","DynamicColorService","colorMap","createOrUpdate","key","has","colorEntity","color","highestSurface","s","addFromPalette","string","_this","colorKey","ColorKey","charAt","toUpperCase","slice","onColorKey","colorKeyContainer","onColorKeyContainer","inverseColorKey","colorKeyFixed","colorKeyFixedDim","onColorKeyFixed","onColorKeyFixedVariant","getPalette","__decorate","Injectable","DefaultColorModel","dynamicColorService","colors","onBackground","surface","surfaceDim","surfaceBright","surfaceContainerLowest","surfaceContainerLow","surfaceContainer","surfaceContainerHigh","surfaceContainerHighest","onSurface","surfaceVariant","onSurfaceVariant","inverseSurface","inverseOnSurface","outline","outlineVariant","shadow","scrim","surfaceTint","secondaryContainer","initialTone","hue","chroma","byDecreasingTone","closestToChroma","Hct","from","chromaPeak","potentialSolution","findDesiredChromaByTone","onSecondaryContainer","tertiaryContainer","proposedHct","sourceColorHct","DislikeAnalyzer","fixIfDisliked","onTertiaryContainer","error","onError","errorContainer","onErrorContainer","onTertiaryFixed","onTertiaryFixedVariant","SchemeService","options","palettes","fromInt","sourceColorArgb","ColorService","defaultColorModel","schemeService","addBaseColors","_i","_Object$entries","Object","entries","_Object$entries$_i","ThemeService","create","AppService","colorService","themeService","ThemeModule","ColorModule","AppModule","_bootstrap","_regeneratorRuntime","mark","_callee","app","wrap","_context","prev","next","NestFactory","sent","listen","stop","apply","arguments","Module","imports","providers","exports","bootstrap"],"mappings":"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"}