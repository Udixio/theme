{"version":3,"file":"udixio-theme.esm.js","sources":["../src/material-color-utilities/contrastCurve.ts","../src/material-color-utilities/toneDeltaPair.ts","../src/material-color-utilities/dynamic_color.ts","../src/color/entities/color.entity.ts","../src/color/dynamic-color.service.ts","../src/color/models/default-color.model.ts","../src/theme/scheme-service.ts","../src/color/color.service.ts","../src/theme/theme.service.ts","../src/app.service.ts","../src/theme/theme.module.ts","../src/color/color.module.ts","../src/app.module.ts","../src/main.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { lerp } from '@material/material-color-utilities';\n\n/**\n * A class containing the contrast curve for a dynamic color on its background.\n *\n * The four values correspond to contrast requirements for contrast levels\n * -1.0, 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n  /**\n   * Creates a `ContrastCurve` object.\n   *\n   * @param low Contrast requirement for contrast level -1.0\n   * @param normal Contrast requirement for contrast level 0.0\n   * @param medium Contrast requirement for contrast level 0.5\n   * @param high Contrast requirement for contrast level 1.0\n   */\n  constructor(\n    readonly low: number,\n    readonly normal: number,\n    readonly medium: number,\n    readonly high: number\n  ) {}\n\n  /**\n   * Returns the contrast ratio at a given contrast level.\n   *\n   * @param contrastLevel The contrast level. 0.0 is the default (normal);\n   * -1.0 is the lowest; 1.0 is the highest.\n   * @return The contrast ratio, a number between 1.0 and 21.0.\n   */\n  getContrast(contrastLevel: number): number {\n    if (contrastLevel <= -1.0) {\n      return this.low;\n    } else if (contrastLevel < 0.0) {\n      return lerp(this.low, this.normal, (contrastLevel - -1) / 1);\n    } else if (contrastLevel < 0.5) {\n      return lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n    } else if (contrastLevel < 1.0) {\n      return lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.high;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicColor } from './dynamic_color';\n\n/**\n * Describes the different in tone between colors.\n */\nexport type TonePolarity = 'darker' | 'lighter' | 'nearer' | 'farther';\n\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n  /**\n   * Documents a constraint in tone distance between two DynamicColors.\n   *\n   * The polarity is an adjective that describes \"A\", compared to \"B\".\n   *\n   * For instance, ToneDeltaPair(A, B, 15, 'darker', stayTogether) states that\n   * A's tone should be at least 15 darker than B's.\n   *\n   * 'nearer' and 'farther' describes closeness to the surface roles. For\n   * instance, ToneDeltaPair(A, B, 10, 'nearer', stayTogether) states that A\n   * should be 10 lighter than B in light mode, and 10 darker than B in dark\n   * mode.\n   *\n   * @param roleA The first role in a pair.\n   * @param roleB The second role in a pair.\n   * @param delta Required difference between tones. Absolute value, negative\n   * values have undefined behavior.\n   * @param polarity The relative relation between tones of roleA and roleB,\n   * as described above.\n   * @param stayTogether Whether these two roles should stay on the same side of\n   * the \"awkward zone\" (T50-59). This is necessary for certain cases where\n   * one role has two backgrounds.\n   */\n  constructor(\n    readonly roleA: DynamicColor,\n    readonly roleB: DynamicColor,\n    readonly delta: number,\n    readonly polarity: TonePolarity,\n    readonly stayTogether: boolean\n  ) {}\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { clampDouble, Contrast, Hct, TonalPalette } from '@material/material-color-utilities';\nimport { SchemeService } from '../theme/scheme-service';\nimport { ContrastCurve } from './contrastCurve';\nimport { ToneDeltaPair } from './toneDeltaPair';\n\n/**\n * @param name The name of the dynamic color. Defaults to empty.\n * @param palette Function that provides a TonalPalette given\n * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n * replaces the need to specify hue/chroma. By providing a tonal palette, when\n * contrast adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme.\n * @param isBackground Whether this dynamic color is a background, with\n * some other color as the foreground. Defaults to false.\n * @param background The background of the dynamic color (as a function of a\n *     `DynamicScheme`), if it exists.\n * @param secondBackground A second background of the dynamic color (as a\n *     function of a `DynamicScheme`), if it\n * exists.\n * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n * against its background should behave in various contrast levels options.\n * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n * constraint between two colors. One of them must be the color being\n * constructed.\n */\ninterface FromPaletteOptions {\n  name?: string;\n  palette: (scheme: SchemeService) => TonalPalette;\n  tone: (scheme: SchemeService) => number;\n  isBackground?: boolean;\n  background?: (scheme: SchemeService) => DynamicColor;\n  secondBackground?: (scheme: SchemeService) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: SchemeService) => ToneDeltaPair;\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<SchemeService, Hct>();\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param name The name of the dynamic color. Defaults to empty.\n   * @param palette Function that provides a TonalPalette given\n   * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n   * replaces the need to specify hue/chroma. By providing a tonal palette, when\n   * contrast adjustments are made, intended chroma can be preserved.\n   * @param tone Function that provides a tone, given a DynamicScheme.\n   * @param isBackground Whether this dynamic color is a background, with\n   * some other color as the foreground. Defaults to false.\n   * @param background The background of the dynamic color (as a function of a\n   *     `DynamicScheme`), if it exists.\n   * @param secondBackground A second background of the dynamic color (as a\n   *     function of a `DynamicScheme`), if it\n   * exists.\n   * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n   * against its background should behave in various contrast levels options.\n   * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n   * constraint between two colors. One of them must be the color being\n   * constructed.\n   */\n  constructor(\n    readonly name: string,\n    readonly palette: (scheme: SchemeService) => TonalPalette,\n    readonly tone: (scheme: SchemeService) => number,\n    readonly isBackground: boolean,\n    readonly background?: (scheme: SchemeService) => DynamicColor,\n    readonly secondBackground?: (scheme: SchemeService) => DynamicColor,\n    readonly contrastCurve?: ContrastCurve,\n    readonly toneDeltaPair?: (scheme: SchemeService) => ToneDeltaPair\n  ) {\n    if (!background && secondBackground) {\n      throw new Error(\n        `Color ${name} has secondBackground` +\n          `defined, but background is not defined.`\n      );\n    }\n    if (!background && contrastCurve) {\n      throw new Error(\n        `Color ${name} has contrastCurve` +\n          `defined, but background is not defined.`\n      );\n    }\n    if (background && !contrastCurve) {\n      throw new Error(\n        `Color ${name} has background` +\n          `defined, but contrastCurve is not defined.`\n      );\n    }\n  }\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n      args.name ?? '',\n      args.palette,\n      args.tone,\n      args.isBackground ?? false,\n      args.background,\n      args.secondBackground,\n      args.contrastCurve,\n      args.toneDeltaPair\n    );\n  }\n\n  /**\n   * Given a background tone, find a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference =\n        Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n        lighterRatio < ratio &&\n        darkerRatio < ratio;\n      return lighterRatio >= ratio ||\n        lighterRatio >= darkerRatio ||\n        negligibleDifference\n        ? lighterTone\n        : darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio\n        ? darkerTone\n        : lighterTone;\n    }\n  }\n\n  /**\n   * Returns whether [tone] prefers a light foreground.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n   * 60, it should not be adjusted. Therefore, 60 is excluded here.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) < 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjust a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (\n      DynamicColor.tonePrefersLightForeground(tone) &&\n      !DynamicColor.toneAllowsLightForeground(tone)\n    ) {\n      return 49.0;\n    }\n    return tone;\n  }\n\n  /**\n   * Return a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getArgb(scheme: SchemeService): number {\n    return this.getHct(scheme).toInt();\n  }\n\n  /**\n   * Return a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getHct(scheme: SchemeService): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const tone = this.getTone(scheme);\n    const answer = this.palette(scheme).getHct(tone);\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Return a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getTone(scheme: SchemeService): number {\n    const decreasingContrast = scheme.contrastLevel < 0;\n\n    // Case 1: dual foreground, pair of colors with delta constraint.\n    if (this.toneDeltaPair) {\n      const toneDeltaPair = this.toneDeltaPair(scheme);\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const delta = toneDeltaPair.delta;\n      const polarity = toneDeltaPair.polarity;\n      const stayTogether = toneDeltaPair.stayTogether;\n\n      const bg = this.background!(scheme);\n      const bgTone = bg.getTone(scheme);\n\n      const aIsNearer =\n        polarity === 'nearer' ||\n        (polarity === 'lighter' && !scheme.isDark) ||\n        (polarity === 'darker' && scheme.isDark);\n      const nearer = aIsNearer ? roleA : roleB;\n      const farther = aIsNearer ? roleB : roleA;\n      const amNearer = this.name === nearer.name;\n      const expansionDir = scheme.isDark ? 1 : -1;\n\n      // 1st round: solve to min, each\n      const nContrast = nearer.contrastCurve!.getContrast(scheme.contrastLevel);\n      const fContrast = farther.contrastCurve!.getContrast(\n        scheme.contrastLevel\n      );\n\n      // If a color is good enough, it is not adjusted.\n      // Initial and adjusted tones for `nearer`\n      const nInitialTone = nearer.tone(scheme);\n      let nTone =\n        Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n          ? nInitialTone\n          : DynamicColor.foregroundTone(bgTone, nContrast);\n      // Initial and adjusted tones for `farther`\n      const fInitialTone = farther.tone(scheme);\n      let fTone =\n        Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n          ? fInitialTone\n          : DynamicColor.foregroundTone(bgTone, fContrast);\n\n      if (decreasingContrast) {\n        // If decreasing contrast, adjust color to the \"bare minimum\"\n        // that satisfies contrast.\n        nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n        fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n      }\n\n      if ((fTone - nTone) * expansionDir >= delta) {\n        // Good! Tones satisfy the constraint; no change needed.\n      } else {\n        // 2nd round: expand farther to match delta.\n        fTone = clampDouble(0, 100, nTone + delta * expansionDir);\n        if ((fTone - nTone) * expansionDir >= delta) {\n          // Good! Tones now satisfy the constraint; no change needed.\n        } else {\n          // 3rd round: contract nearer to match delta.\n          nTone = clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // Avoids the 50-59 awkward zone.\n      if (50 <= nTone && nTone < 60) {\n        // If `nearer` is in the awkward zone, move it away, together with\n        // `farther`.\n        if (expansionDir > 0) {\n          nTone = 60;\n          fTone = Math.max(fTone, nTone + delta * expansionDir);\n        } else {\n          nTone = 49;\n          fTone = Math.min(fTone, nTone + delta * expansionDir);\n        }\n      } else if (50 <= fTone && fTone < 60) {\n        if (stayTogether) {\n          // Fixes both, to avoid two colors on opposite sides of the \"awkward\n          // zone\".\n          if (expansionDir > 0) {\n            nTone = 60;\n            fTone = Math.max(fTone, nTone + delta * expansionDir);\n          } else {\n            nTone = 49;\n            fTone = Math.min(fTone, nTone + delta * expansionDir);\n          }\n        } else {\n          // Not required to stay together; fixes just one.\n          if (expansionDir > 0) {\n            fTone = 60;\n          } else {\n            fTone = 49;\n          }\n        }\n      }\n\n      // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n      return amNearer ? nTone : fTone;\n    } else {\n      // Case 2: No contrast pair; just solve for itself.\n      let answer = this.tone(scheme);\n\n      if (this.background == null) {\n        return answer; // No adjustment for colors with no background.\n      }\n\n      const bgTone = this.background(scheme).getTone(scheme);\n\n      const desiredRatio = this.contrastCurve!.getContrast(\n        scheme.contrastLevel\n      );\n\n      if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n        // Don't \"improve\" what's good enough.\n      } else {\n        // Rough improvement.\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (this.isBackground && 50 <= answer && answer < 60) {\n        // Must adjust\n        if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n          answer = 49;\n        } else {\n          answer = 60;\n        }\n      }\n\n      if (this.secondBackground) {\n        // Case 3: Adjust for dual backgrounds.\n\n        const [bg1, bg2] = [this.background, this.secondBackground];\n        const [bgTone1, bgTone2] = [\n          bg1(scheme).getTone(scheme),\n          bg2(scheme).getTone(scheme),\n        ];\n        const [upper, lower] = [\n          Math.max(bgTone1, bgTone2),\n          Math.min(bgTone1, bgTone2),\n        ];\n\n        if (\n          Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n          Contrast.ratioOfTones(lower, answer) >= desiredRatio\n        ) {\n          return answer;\n        }\n\n        // The darkest light tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const lightOption = Contrast.lighter(upper, desiredRatio);\n\n        // The lightest dark tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const darkOption = Contrast.darker(lower, desiredRatio);\n\n        // Tones suitable for the foreground.\n        const availables = [];\n        if (lightOption !== -1) availables.push(lightOption);\n        if (darkOption !== -1) availables.push(darkOption);\n\n        const prefersLight =\n          DynamicColor.tonePrefersLightForeground(bgTone1) ||\n          DynamicColor.tonePrefersLightForeground(bgTone2);\n        if (prefersLight) {\n          return lightOption < 0 ? 100 : lightOption;\n        }\n        if (availables.length === 1) {\n          return availables[0];\n        }\n        return darkOption < 0 ? 0 : darkOption;\n      }\n\n      return answer;\n    }\n  }\n}\n","import { hexFromArgb, TonalPalette } from '@material/material-color-utilities';\nimport { SchemeService } from '../../theme/scheme-service';\nimport { DynamicColor } from '../../material-color-utilities/dynamic_color';\nimport { ContrastCurve } from '../../material-color-utilities';\n\n\nexport interface ColorOptions {\n  name: string;\n  palette: (scheme: SchemeService) => TonalPalette;\n  tone: (scheme: SchemeService) => number;\n  isBackground?: boolean;\n  background?: (scheme: SchemeService) => DynamicColor;\n  secondBackground?: (scheme: SchemeService) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: SchemeService) => {\n    roleA: DynamicColor;\n    readonly roleB: DynamicColor;\n    readonly delta: number;\n    readonly polarity: 'darker' | 'lighter' | 'nearer' | 'farther';\n    readonly stayTogether: boolean;\n  };\n}\n\nexport class ColorEntity {\n  constructor(private option: ColorOptions) {}\n\n  update(args: Partial<ColorOptions>) {\n    this.option = {\n      ...this.option,\n      ...args,\n    };\n  }\n\n  getHex(scheme: SchemeService): string {\n    return hexFromArgb(this.getArgb(scheme));\n  }\n\n  getArgb(scheme: SchemeService) {\n    return this.getDynamicColor().getArgb(scheme);\n  }\n\n  getName(): string {\n    return this.option.name.replace(/([A-Z])/g, '_$1').toLowerCase();\n  }\n\n  getDynamicColor(): DynamicColor {\n    return DynamicColor.fromPalette({ ...this.option, name: this.getName() });\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { ContrastCurve, ToneDeltaPair } from '../material-color-utilities';\nimport { DynamicColor } from '../material-color-utilities/dynamic_color';\nimport { SchemeService } from '../theme/scheme-service';\n\nimport { ColorEntity, ColorOptions } from './entities/color.entity';\n\n\nexport type DynamicColorKey =\n  | 'background'\n  | 'onBackground'\n  | 'surface'\n  | 'surfaceDim'\n  | 'surfaceBright'\n  | 'surfaceContainerLowest'\n  | 'surfaceContainerLow'\n  | 'surfaceContainer'\n  | 'surfaceContainerHigh'\n  | 'surfaceContainerHighest'\n  | 'onSurface'\n  | 'surfaceVariant'\n  | 'onSurfaceVariant'\n  | 'inverseSurface'\n  | 'inverseOnSurface'\n  | 'outline'\n  | 'outlineVariant'\n  | 'shadow'\n  | 'scrim'\n  | 'surfaceTint'\n  | 'primary'\n  | 'onPrimary'\n  | 'primaryContainer'\n  | 'onPrimaryContainer'\n  | 'inversePrimary'\n  | 'secondary'\n  | 'onSecondary'\n  | 'secondaryContainer'\n  | 'onSecondaryContainer'\n  | 'tertiary'\n  | 'onTertiary'\n  | 'tertiaryContainer'\n  | 'onTertiaryContainer'\n  | 'error'\n  | 'onError'\n  | 'errorContainer'\n  | 'onErrorContainer'\n  | 'primaryFixed'\n  | 'primaryFixedDim'\n  | 'onPrimaryFixed'\n  | 'onPrimaryFixedVariant'\n  | 'secondaryFixed'\n  | 'secondaryFixedDim'\n  | 'onSecondaryFixed'\n  | 'onSecondaryFixedVariant'\n  | 'tertiaryFixed'\n  | 'tertiaryFixedDim'\n  | 'onTertiaryFixed'\n  | 'onTertiaryFixedVariant';\n\nfunction capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n@Injectable()\nexport class DynamicColorService {\n  private colorMap = new Map<string, ColorEntity>();\n\n  createOrUpdate(key: string, args: Omit<ColorOptions, 'name'>) {\n    if (!this.colorMap.has(key)) {\n      this.colorMap.set(key, new ColorEntity({ ...args, name: key }));\n    } else {\n      const colorEntity = this.colorMap.get(key);\n      if (!colorEntity) {\n        throw new Error('Color entity not found');\n      }\n      colorEntity.update({ ...args, name: key });\n      this.colorMap.set(key, colorEntity);\n    }\n  }\n\n  public get(key: string): DynamicColor {\n    const color = this.colorMap.get(key);\n    if (color) {\n      return color.getDynamicColor();\n    } else {\n      throw new Error(`Color ${key} does not exist`);\n    }\n  }\n\n  highestSurface(s: SchemeService): DynamicColor {\n    return s.isDark ? this.get('surfaceBright') : this.get('surfaceDim');\n  }\n\n  addFromPalette(key: string): void {\n    const colorKey = key as DynamicColorKey;\n    const ColorKey = capitalizeFirstLetter(key);\n    const onColorKey = ('on' + ColorKey) as DynamicColorKey;\n    const colorKeyContainer = (colorKey + 'Container') as DynamicColorKey;\n    const onColorKeyContainer = ('on' +\n      ColorKey +\n      'Container') as DynamicColorKey;\n    const inverseColorKey = ('inverse' + ColorKey) as DynamicColorKey;\n    const colorKeyFixed = (colorKey + 'Fixed') as DynamicColorKey;\n    const colorKeyFixedDim = (colorKey + 'FixedDim') as DynamicColorKey;\n    const onColorKeyFixed = ('on' + ColorKey + 'Fixed') as DynamicColorKey;\n    const onColorKeyFixedVariant = ('on' +\n      ColorKey +\n      'FixedVariant') as DynamicColorKey;\n\n    this.createOrUpdate(colorKey, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 80 : 40;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyContainer),\n          this.get(colorKey),\n          15,\n          'nearer',\n          false\n        ),\n    });\n    this.createOrUpdate(onColorKey, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 20 : 100;\n      },\n      background: (s) => this.get(colorKey),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    });\n    this.createOrUpdate(colorKeyContainer, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 30 : 90;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyContainer),\n          this.get(colorKey),\n          15,\n          'nearer',\n          false\n        ),\n    });\n    this.createOrUpdate(onColorKeyContainer, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => {\n        return s.isDark ? 90 : 10;\n      },\n      background: (s) => this.get(colorKeyContainer),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    });\n    this.createOrUpdate(inverseColorKey, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => (s.isDark ? 40 : 80),\n      background: (s) => this.get('inverseSurface'),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    });\n    this.createOrUpdate(colorKeyFixed, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 90.0,\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyFixed),\n          this.get(colorKeyFixedDim),\n          10,\n          'lighter',\n          true\n        ),\n    });\n    this.createOrUpdate(colorKeyFixedDim, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 80.0,\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.get(colorKeyFixed),\n          this.get(colorKeyFixedDim),\n          10,\n          'lighter',\n          true\n        ),\n    });\n    this.createOrUpdate(onColorKeyFixed, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 10.0,\n      background: (s) => this.get(colorKeyFixedDim),\n      secondBackground: (s) => this.get(colorKeyFixed),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    });\n    this.createOrUpdate(onColorKeyFixedVariant, {\n      palette: (s) => s.getPalette(key),\n      tone: (s) => 30.0,\n      background: (s) => this.get(colorKeyFixedDim),\n      secondBackground: (s) => this.get(colorKeyFixed),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n}\n","import { DislikeAnalyzer, Hct } from '@material/material-color-utilities';\nimport { ContrastCurve, ToneDeltaPair } from '../../material-color-utilities';\nimport { DynamicColor } from '../../material-color-utilities/dynamic_color';\nimport { Injectable } from '@nestjs/common';\nimport { ColorOptions } from '../entities/color.entity';\nimport { DynamicColorService } from '../dynamic-color.service';\n\nexport type DynamicColorKey =\n  | 'background'\n  | 'onBackground'\n  | 'surface'\n  | 'surfaceDim'\n  | 'surfaceBright'\n  | 'surfaceContainerLowest'\n  | 'surfaceContainerLow'\n  | 'surfaceContainer'\n  | 'surfaceContainerHigh'\n  | 'surfaceContainerHighest'\n  | 'onSurface'\n  | 'surfaceVariant'\n  | 'onSurfaceVariant'\n  | 'inverseSurface'\n  | 'inverseOnSurface'\n  | 'outline'\n  | 'outlineVariant'\n  | 'shadow'\n  | 'scrim'\n  | 'surfaceTint'\n  | 'primary'\n  | 'onPrimary'\n  | 'primaryContainer'\n  | 'onPrimaryContainer'\n  | 'inversePrimary'\n  | 'secondary'\n  | 'onSecondary'\n  | 'secondaryContainer'\n  | 'onSecondaryContainer'\n  | 'tertiary'\n  | 'onTertiary'\n  | 'tertiaryContainer'\n  | 'onTertiaryContainer'\n  | 'error'\n  | 'onError'\n  | 'errorContainer'\n  | 'onErrorContainer'\n  | 'primaryFixed'\n  | 'primaryFixedDim'\n  | 'onPrimaryFixed'\n  | 'onPrimaryFixedVariant'\n  | 'secondaryFixed'\n  | 'secondaryFixedDim'\n  | 'onSecondaryFixed'\n  | 'onSecondaryFixedVariant'\n  | 'tertiaryFixed'\n  | 'tertiaryFixedDim'\n  | 'onTertiaryFixed'\n  | 'onTertiaryFixedVariant';\n\nfunction findDesiredChromaByTone(\n  hue: number,\n  chroma: number,\n  tone: number,\n  byDecreasingTone: boolean\n): number {\n  let answer = tone;\n\n  let closestToChroma = Hct.from(hue, chroma, tone);\n  if (closestToChroma.chroma < chroma) {\n    let chromaPeak = closestToChroma.chroma;\n    while (closestToChroma.chroma < chroma) {\n      answer += byDecreasingTone ? -1.0 : 1.0;\n      const potentialSolution = Hct.from(hue, chroma, answer);\n      if (chromaPeak > potentialSolution.chroma) {\n        break;\n      }\n      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n        break;\n      }\n\n      const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n      const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n      if (potentialDelta < currentDelta) {\n        closestToChroma = potentialSolution;\n      }\n      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n    }\n  }\n\n  return answer;\n}\n\n@Injectable()\nexport class DefaultColorModel {\n  colors: Partial<\n    Record<DynamicColorKey, Partial<Omit<ColorOptions, 'name'>>>\n  > = {\n    background: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 6 : 98),\n      isBackground: true,\n    },\n    onBackground: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.dynamicColorService.get('background'),\n      contrastCurve: new ContrastCurve(3, 3, 4.5, 7),\n    },\n    surface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 6 : 98),\n      isBackground: true,\n    },\n    surfaceDim: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 6 : 87),\n      isBackground: true,\n    },\n    surfaceBright: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 24 : 98),\n      isBackground: true,\n    },\n    surfaceContainerLowest: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 4 : 100),\n      isBackground: true,\n    },\n    surfaceContainerLow: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 10 : 96),\n      isBackground: true,\n    },\n    surfaceContainer: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 12 : 94),\n      isBackground: true,\n    },\n    surfaceContainerHigh: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 17 : 92),\n      isBackground: true,\n    },\n    surfaceContainerHighest: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 22 : 90),\n      isBackground: true,\n    },\n    onSurface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    surfaceVariant: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 30 : 90),\n      isBackground: true,\n    },\n    onSurfaceVariant: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 80 : 30),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    },\n    inverseSurface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 90 : 20),\n    },\n    inverseOnSurface: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 20 : 95),\n      background: (s) => this.dynamicColorService.get('inverseSurface'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    outline: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 60 : 50),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(1.5, 3, 4.5, 7),\n    },\n    outlineVariant: {\n      palette: (s) => s.getPalette('neutralVariantPalette'),\n      tone: (s) => (s.isDark ? 30 : 80),\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n    },\n    shadow: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => 0,\n    },\n    scrim: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => 0,\n    },\n    surfaceTint: {\n      palette: (s) => s.getPalette('neutralPalette'),\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n    },\n    secondaryContainer: {\n      tone: (s) => {\n        const initialTone = s.isDark ? 30 : 90;\n        return findDesiredChromaByTone(\n          s.getPalette('secondary').hue,\n          s.getPalette('secondary').chroma,\n          initialTone,\n          !s.isDark\n        );\n      },\n    },\n    onSecondaryContainer: {\n      tone: (s) => {\n        return DynamicColor.foregroundTone(\n          this.dynamicColorService.get('secondaryContainer').tone(s),\n          4.5\n        );\n      },\n    },\n    tertiaryContainer: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => {\n        const proposedHct = s\n          .getPalette('tertiaryPalette')\n          .getHct(s.sourceColorHct.tone);\n        return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n      },\n    },\n    onTertiaryContainer: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => {\n        return DynamicColor.foregroundTone(\n          this.dynamicColorService.get('tertiaryContainer').tone(s),\n          4.5\n        );\n      },\n    },\n    error: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.dynamicColorService.get('errorContainer'),\n          this.dynamicColorService.get('error'),\n          15,\n          'nearer',\n          false\n        ),\n    },\n    onError: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 20 : 100),\n      background: (s) => this.dynamicColorService.get('error'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    errorContainer: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 30 : 90),\n      isBackground: true,\n      background: (s) => this.dynamicColorService.highestSurface(s),\n      contrastCurve: new ContrastCurve(1, 1, 3, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.dynamicColorService.get('errorContainer'),\n          this.dynamicColorService.get('error'),\n          15,\n          'nearer',\n          false\n        ),\n    },\n    onErrorContainer: {\n      palette: (s) => s.getPalette('errorPalette'),\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.dynamicColorService.get('errorContainer'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n\n    onTertiaryFixed: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => 10.0,\n      background: (s) => this.dynamicColorService.get('tertiaryFixedDim'),\n      secondBackground: (s) => this.dynamicColorService.get('tertiaryFixed'),\n      contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n    },\n    onTertiaryFixedVariant: {\n      palette: (s) => s.getPalette('tertiaryPalette'),\n      tone: (s) => 30.0,\n      background: (s) => this.dynamicColorService.get('tertiaryFixedDim'),\n      secondBackground: (s) => this.dynamicColorService.get('tertiaryFixed'),\n      contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n    },\n  };\n\n  constructor(private dynamicColorService: DynamicColorService) {}\n}\n","import { Hct, TonalPalette } from '@material/material-color-utilities';\nimport { Injectable } from '@nestjs/common';\n\nexport interface SchemeOptions {\n  sourceColorArgb: number;\n  contrastLevel: number;\n  isDark: boolean;\n  palettes: Map<string, TonalPalette>;\n}\n\n@Injectable()\nexport class SchemeService {\n  options?: SchemeOptions;\n\n  get contrastLevel() {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n    return this.options.contrastLevel;\n  }\n\n  get isDark() {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n    return this.options.isDark;\n  }\n\n  get sourceColorHct() {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n    return Hct.fromInt(this.options.sourceColorArgb);\n  }\n\n  getPalette(key: string): TonalPalette {\n    if (!this.options) {\n      throw new Error('Scheme options is not set');\n    }\n\n    const palette = this.options.palettes.get(key);\n    if (!palette) {\n      throw new Error(`Palette ${key} not found`);\n    }\n    return palette;\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { DefaultColorModel } from './models/default-color.model';\nimport { DynamicColorService } from './dynamic-color.service';\nimport { Hct, hexFromArgb } from '@material/material-color-utilities';\nimport { SchemeService } from '../theme/scheme-service';\n\n@Injectable()\nexport class ColorService {\n  constructor(\n    private defaultColorModel: DefaultColorModel,\n    private dynamicColorService: DynamicColorService,\n    private schemeService: SchemeService\n  ) {}\n\n  addBaseColors() {\n    this.dynamicColorService.addFromPalette('primary');\n    this.dynamicColorService.addFromPalette('secondary');\n    this.dynamicColorService.addFromPalette('tertiary');\n    for (const [key, value] of Object.entries(this.defaultColorModel.colors)) {\n      this.dynamicColorService.createOrUpdate(key, value as any);\n    }\n  }\n\n  getArgb(key: string): number {\n    return this.dynamicColorService.get(key).getArgb(this.schemeService);\n  }\n\n  getHex(key: string): string {\n    return hexFromArgb(this.getArgb(key));\n  }\n\n  getHct(key: string): Hct {\n    return this.dynamicColorService.get(key).getHct(this.schemeService);\n  }\n}\n","import { DynamicColor } from '@material/material-color-utilities';\nimport { Injectable } from '@nestjs/common';\nimport { SchemeOptions, SchemeService } from './scheme-service';\n\ntype ThemeOptions = SchemeOptions;\n\nconst colorPaletteKeyColor = DynamicColor.fromPalette({\n  name: 'primary_palette_key_color',\n  palette: (s) => s.primaryPalette,\n  tone: (s) => s.primaryPalette.keyColor.tone,\n});\n\n@Injectable()\nexport class ThemeService {\n  constructor(private schemeService: SchemeService) {\n    // this.addPalette({key: \"primary\", addDefaultColors: true})\n    // this.addPalette({key: \"secondary\", addDefaultColors: true})\n    // this.addPalette({key: \"tertiary\", addDefaultColors: true})\n    // this.addPalette({key: \"error\", palette: TonalPalette.fromHueAndChroma(25.0, 84.0)})\n    // this.addPalette({key: \"neutral\"})\n    // this.addPalette({key: \"neutralVariant\"})\n  }\n  // addPalette({key, palette, addDefaultColors}: {key: string; palette: TonalPalette; addDefaultColors: boolean}) {\n  //   this.themeOptions.palettes.set(key, palette);\n  //   if (addDefaultColors){\n  //     this.colorService.addPalette(key)\n  //   }\n  // }\n\n  // create(args: ThemeOptions): SchemeService {\n  //   return new SchemeService(args, this.colorService)\n  // }\n  //\n  // update(options: Partial<ThemeOptions>): SchemeService {\n  //   Object.assign(this.themeOptions, options);\n  //   return this.theme();\n  // }\n\n  create(options: ThemeOptions) {\n    this.schemeService.options = options;\n  }\n\n  update(options: ThemeOptions) {\n    this.schemeService.options = {\n      ...this.schemeService.options,\n      ...options,\n    };\n  }\n\n  // theme(): SchemeService {\n  //   return new SchemeService(this.themeOptions, this.colorService)\n  // }\n}\n","import { Injectable } from '@nestjs/common';\nimport { ColorService } from './color/color.service';\nimport { ThemeService } from './theme/theme.service';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    public colorService: ColorService,\n    public themeService: ThemeService\n  ) {}\n}\n","import { Module } from '@nestjs/common';\nimport { SchemeService } from './scheme-service';\nimport { ThemeService } from './theme.service';\n\n@Module({\n  providers: [SchemeService, ThemeService],\n  exports: [ThemeService, SchemeService],\n})\nexport class ThemeModule {}\n","import { ColorService } from './color.service';\nimport { Module } from '@nestjs/common';\nimport { DefaultColorModel } from './models/default-color.model';\nimport { DynamicColorService } from './dynamic-color.service';\nimport { ThemeModule } from '../theme/theme.module';\n\n@Module({\n  imports: [ThemeModule],\n  providers: [DefaultColorModel, ColorService, DynamicColorService],\n  exports: [ColorService],\n})\nexport class ColorModule {}\n","import { Module } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ColorModule } from './color/color.module';\nimport { ThemeModule } from './theme/theme.module';\n\n@Module({\n  imports: [ColorModule, ThemeModule],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n"],"names":["ContrastCurve","low","normal","medium","high","_proto","prototype","getContrast","contrastLevel","lerp","ToneDeltaPair","roleA","roleB","delta","polarity","stayTogether","DynamicColor","name","palette","tone","isBackground","background","secondBackground","contrastCurve","toneDeltaPair","hctCache","Map","Error","fromPalette","args","_args$name","_args$isBackground","foregroundTone","bgTone","ratio","lighterTone","Contrast","lighterUnsafe","darkerTone","darkerUnsafe","lighterRatio","ratioOfTones","darkerRatio","preferLighter","tonePrefersLightForeground","negligibleDifference","Math","abs","round","toneAllowsLightForeground","enableLightForeground","getArgb","scheme","getHct","toInt","cachedAnswer","get","getTone","answer","size","clear","set","decreasingContrast","bg","aIsNearer","isDark","nearer","farther","amNearer","expansionDir","nContrast","fContrast","nInitialTone","nTone","fInitialTone","fTone","clampDouble","max","min","desiredRatio","_ref","bg1","bg2","_ref2","bgTone1","bgTone2","_ref3","upper","lower","lightOption","lighter","darkOption","darker","availables","push","prefersLight","length","ColorEntity","option","update","_extends","getHex","hexFromArgb","getDynamicColor","getName","replace","toLowerCase","capitalizeFirstLetter","string","charAt","toUpperCase","slice","DynamicColorService","colorMap","createOrUpdate","key","has","colorEntity","color","highestSurface","s","addFromPalette","_this","colorKey","ColorKey","onColorKey","colorKeyContainer","onColorKeyContainer","inverseColorKey","colorKeyFixed","colorKeyFixedDim","onColorKeyFixed","onColorKeyFixedVariant","getPalette","__decorate","Injectable","findDesiredChromaByTone","hue","chroma","byDecreasingTone","closestToChroma","Hct","from","chromaPeak","potentialSolution","potentialDelta","currentDelta","DefaultColorModel","dynamicColorService","colors","onBackground","surface","surfaceDim","surfaceBright","surfaceContainerLowest","surfaceContainerLow","surfaceContainer","surfaceContainerHigh","surfaceContainerHighest","onSurface","surfaceVariant","onSurfaceVariant","inverseSurface","inverseOnSurface","outline","outlineVariant","shadow","scrim","surfaceTint","secondaryContainer","initialTone","onSecondaryContainer","tertiaryContainer","proposedHct","sourceColorHct","DislikeAnalyzer","fixIfDisliked","onTertiaryContainer","error","onError","errorContainer","onErrorContainer","onTertiaryFixed","onTertiaryFixedVariant","SchemeService","options","palettes","_createClass","fromInt","sourceColorArgb","ColorService","defaultColorModel","schemeService","addBaseColors","_i","_Object$entries","Object","entries","_Object$entries$_i","value","ThemeService","create","AppService","colorService","themeService","ThemeModule","Module","providers","exports","ColorModule","imports","AppModule","bootstrap","_bootstrap","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","app","wrap","_callee$","_context","prev","next","NestFactory","sent","listen","stop"],"mappings":"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"}